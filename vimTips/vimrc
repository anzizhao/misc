" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
set nocompatible  "关闭vim一致性原则
filetype plugin on
filetype indent on

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax enable 
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=dark

" Uncomment the following to have Vim jump to the last position when

" reopening a file
"if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif


" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" base setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showcmd		    " Show (partial) command in status line.
set statusline=[%t]%y%r%m%*%=(%c,%l/%L)%p%%
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden          " Hide buffers when they are abandonedset
set mouse=a		    " Enable mouse usage (all modes)
set foldmethod=indent "set default foldmethod"
set foldlevelstart=99
set foldlevel=1 
set ruler           " 显示标尺  
"set cursorcolumn   "突出显示当前列
set cursorline      " 突出显示当前行"
set magic           " 设置魔术http://www.cnblogs.com/penseur/archive/2011/02/25/1964522.html
set laststatus=2    " 显示状态栏 (默认值为 1, 无法显示状态栏) "
set tabstop=4       " 设置制表符(tab键)的宽度"
set softtabstop=4   " 设置软制表符的宽度"
set shiftwidth=4    " (自动) 缩进使用的4个空格"
set expandtab
set autoindent
set notextmode
set hlsearch        "搜索高亮 ":nohlsearch
set wildmenu           " see :h 'wildmenu'
set wildignore=*.o,*~,*.pyc,*.swp,*.jpg,*png,*.gif,.svn " ignore these file complete
set wildmode=list:full " see :h 'wildmode' for all the possible values
set backspace=indent,eol,start " Configure backspace so it acts as it should act
"set whichwrap+=<,>,h,l
set lazyredraw " Don't redraw while executing macros (good performance config)
set history=700 " Sets how many lines of history VIM has to remember
set noswapfile " no swap files
set viminfo='100,n/home/zja/.vim/files/info/viminfo
set splitbelow 
"set relativenumber " line number 
"set tags=./tags

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vundle settingss
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=/home/zja/.vim/bundle/Vundle.vim
"set rtp+=~/.vim/bundle/unite.vim/autoload/unite.vim
"set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
call vundle#begin()
"call vundle#rc()
" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'
" theme molokai
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
" directory tree
" directory tree
Plugin 'scrooloose/nerdtree' 
"" autocomplete utils
""Plugin 'Shougo/neocomplcache.vim'
Plugin 'Valloric/YouCompleteMe'
"" comment utils
Plugin 'scrooloose/nerdcommenter'
""结构体自动补全 snipmate 
""Plugin 'msanders/snipmate.vim'
""符号对其 :Tab /:

"Plugin 'godlygeek/tabular'

""JavaScript bundle for vim, this bundle provides syntax and indent plugins.
Plugin 'pangloss/vim-javascript'

""底栏
Plugin 'bling/vim-airline'
"" about "surroundings": parentheses, brackets, quotes, XML tags
"Plugin 'tpope/vim-surround'
""html 标签补全 http://www.zfanw.com/blog/zencoding-vim-tutorial-chinese.html
Plugin 'mattn/emmet-vim'
""ack-grep or ag:silver searcher
Plugin 'mileszs/ack.vim'
""undo redo tree
Plugin 'mbbill/undotree'
""xdebug DBGPavim
"Plugin 'brookhong/DBGPavim'
"" document generator
"Plugin 'vim-scripts/DoxygenToolkit.vim'
""start screen
"Plugin 'mhinz/vim-startify'
""sublime text style multiple selections
"Plugin 'terryma/vim-multiple-cursors'
""Interactive command execution in Vim.
"Plugin 'Shougo/vimproc.vim'
""Powerful shell implemented by vim.
"Plugin 'Shougo/vimshell.vim'
""Syntax checking hacks for vim
Plugin 'scrooloose/syntastic'
""Unite and create user interfaces 
Plugin 'Shougo/unite.vim'
""MRU plugin includes unite.vim MRU sources
"Plugin 'Shougo/neomru.vim'
""Vim plugin that displays tags in a window
"Plugin 'majutsushi/tagbar'
""git control
"Plugin 'tpope/vim-fugitive'
""注释增强
Plugin 'tomtom/tcomment_vim'
""在html中显示匹配的标签
Plugin 'gregsexton/MatchTag'
""在html中按%跳转至对应的标签
Plugin 'vim-scripts/matchit.zip'
""ctrl+p 搜索文件，buffer
Plugin 'kien/ctrlp.vim' 
""Plugin 'Shougo/neosnippet'
""Plugin 'Shougo/neosnippet-snippets'
""php函数自动补全
""Plugin 'brookhong/neco-php' 
""顶部minibuf
Plugin 'fholgado/minibufexpl.vim'
"" snips which needs python and python3
Plugin 'SirVer/ultisnips'
""底栏
""Plugin 'Lokaltog/vim-powerline'
""taglist
""Plugin 'kylinwowo/taglist'
""phpcomplete
"Plugin 'shawncplus/phpcomplete.vim'
""php manual
""Plugin 'alvan/vim-php-manual'
""Plugin 'adoy/vim-php-refactoring-toolbox'
"Plugin 'joonty/vim-phpqa' P"P
"
"
"tern 插件
Plugin 'marijnh/tern_for_vim'
"SupperTab  自动补全插件
Plugin 'ervandew/supertab'

Plugin 'majutsushi/tagbar'
"" about "surroundings": parentheses, brackets, quotes, XML tags
Plugin 'tpope/vim-surround' 
"Plugin 'maksimr/vim-jsbeautify'
"Plugin 'einars/js-beautify'
Plugin 'mattn/calendar-vim'
"Plugin 'genoma/vim-less'
Plugin 'groenewege/vim-less'
Plugin 'JulesWang/css.vim'
"Plugin 'skammer/vim-css-color'
"Plugin 'hail2u/vim-css3-syntax'
"
Plugin 'easymotion/vim-easymotion'
Plugin 'Raimondi/delimitMate'

Plugin 'gorodinskiy/vim-coloresque'

Plugin 'kana/vim-textobj-user'
"Plugin 'kana/vim-textobj-function'
Plugin 'anzizhao/vim-textobj-function'
Plugin 'anzizhao/vim-textobj-function-javascript'            

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

Plugin 'mxw/vim-jsx'
Plugin 'isRuslan/vim-es6'

Plugin 'tpope/vim-repeat'
"Plugin 'wookiehangover/jshint'

Plugin 'elzr/vim-json'

Plugin 'heavenshell/vim-jsdoc'
Plugin 'moll/vim-node'





call vundle#end()

filetype off
filetype plugin indent on

let mapleader=","
let g:mapleader=","
nmap <leader>w :w!<cr>
"nmap <leader>q :q<cr>
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
"map <space> /
map <c-space> ?
" Smart way to move between windows
map <C-j> <C-W>j
map <C-K> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-r> <C-W>r
" jump to function header
map <leader>[  ?function<cr>
map <leader>]  ?function<cr>/{<cr>%<cr>
" tern_for_vim map 
nmap <leader>f :TernDef<cr>
nmap <leader>l :TernRefs<cr>
nmap <leader>t :TernType<cr>
nmap <leader>d :TernDoc<cr>
map <C-;> ;
"buffer next and pre
nmap <leader>n :bn<cr>
nmap <leader>p :bp<cr>
nmap <leader>tn :tabNext<cr>
nmap <leader>tp :tabprevious<cr>

"nmap <M-m>  :call NERDComment(1,'invert') <cr>
"nmap <leader>ii  :call NERDComment(1,'invert') <cr>

"LEADER TOGGLES
"nmap <leader>tt :TlistToggle<cr> "function! ToggleTree()

nmap <leader>bu :Unite buffer<cr>
nmap <leader>bt :UniteClose <cr>

" surround key map
" as means add symbol
map as   ysiw   
" uppercase and lowercase
"map <leader>uw  <Esc>guw 
"map <leader>uu   <Esc>guu 
"map <leader>Uw  <Esc>gUw 
"map <leader>UU  <ESC>gUU 

"map <c-f> :call JsBeautify()<cr>
" or
"autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
"autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
"autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

"autocmd FileType less noremap <Leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>

au BufRead,BufNewFile *.less setfiletype css

"noremap <Leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>
"let g:tagbar_autoclose = 1
"let g:tagbar_autofocus = 1
let g:tagbar_compact = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:tagbar_type_javascript = {'ctagsbin' : '/usr/local/bin/jsctags'}
let g:tagbar_type_javascript = {
            \'ctagsbin' : '/usr/local/bin/jsctags',
            \ 'kinds' : [
                \ 'v:variables:1:0',
                \ 'f:functions:1:0',
            \ ],
            \}

" theme setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
"set background=dark
set number "设置字体和大小


"color solarized
set t_Co=256
color molokai 
let g:molokai_original = 1
let g:rehash256 = 1
set ts=4
set shiftwidth=4
hi CursorLine ctermbg=233  cterm=NONE  ctermfg=NONE
hi CursorLine term=underline cterm=underline ctermbg=NONE 
hi Visual     term=reverse ctermbg=236 guibg=#403D3D

colorscheme molokai 

"背景透明
hi Normal     ctermbg=none 

"let g:airline_powerline_fonts = 1
let g:airline_inactive_collapse=1
let g:airline_section_b = ''
let g:airline_section_c = '%t'

"no need   buffer line 
let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#bufferline#overwrite_variables = 0


let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#displayed_head_limit = 10


let g:airline#extensions#syntastic#enabled = 0

let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'



let g:airlineirline#extensions#whitespace#trailing_format = 't[%s]'
let g:airline#extensions#default#layout = [
            \ [ 'a', 'c' ],
            \ [ 'warning' ]
            \ ]



"""""""""
"  ack  "
"""""""""
let g:ackprg = "ag --vimgrep"

""""""""""""""""""""""""""""""
" nerdtree setting
""""""""""""""""""""""""""""""
let NERDChristmasTree=1       "显示增强
let NERDTreeDirArrows=0
let NERDTreeAutoCenter=1      "自动调整焦点
let NERDTreeMouseMode=2       "鼠标模式:目录单击,文件双击
"let NERDTreeQuitOnOpen=1      "打开文件后自动关闭
let NERDTreeShowFiles=1       "显示文件
"let NERDTreeShowHidden=1      "显示隐藏文件
let NERDTreeHightCursorline=1 "高亮显示当前文件或目录
let NERDTreeWinPos='left'     "窗口位置
let NERDTreeWinSize=31        "窗口宽度
"let NERDTreeShowBookmarks = 1
"let NERDTreeMinimalUI=1 "不显示'Bookmarks' label 'Press ? for help'
"let NERDTreeIgnore = ['\.pyc$']

"undo tree setting
let g:undotree_WindowLayout = 4
set undodir=~/.vim/.undodir/
set undofile

"ctrlp settings
"let g:ctrlp_working_path_mode = 'w'
let g:ctrlp_working_path_mode = 'w' 
let g:ctrlp_custom_ignore = { 
            \ 'dir': '\v[\/](\.(git|hg|svn)$)|(node_modules)|(bower_components)', 
            \ 'file': '\v\.(exe|so|dll)$', 
            \ 'link': 'some_bad_symbolic_links', 
            \ }


""""""""""""""""""""""""""""""
" others setting
""""""""""""""""""""""""""""""
let &termencoding=&encoding
set fileencodings=utf-8,gbk
let g:DirDiffExcludes = "system,CVS,*.class,*.exe,.svn,*.swp,/data/,/template/" 



"搜索时把当前结果置于屏幕中央并打开折叠
nnoremap n nzzzv
nnoremap N Nzzzv

"翻转; 和 :
nnoremap ; :
"nnoremap : ;

"unite
""nnoremap <C-l> :Unite file file_rec file_mru buffer -quick-match -auto-preview -start-insert <CR>
""nnoremap <C-P> :Unite file file_rec file_mru buffer  -auto-preview   <CR>
"let g:unite_source_history_yank_enable = 1
"let g:unite_data_directory='~/.vim/.cache/unite'
"let g:unite_enable_start_insert=1
"let g:unite_source_history_yank_enable=1
"let g:unite_prompt='» '
"let g:unite_source_grep_default_opts = '-i --exclude ''\.(git|svn|hg|bzr|swp|jpg|png|gif)$'
"let g:unite_split_rule = 'botright'
""nnoremap <silent> <c-p> :Unite -auto-preview  -auto-resize file file_mru file_rec <cr>
""nnoremap <silent> <c-p> :Unite  -auto-resize file file_mru file_rec <cr>
"nnoremap <silent> <C-p> :Unite -start-insert -buffer-name=files -winheight=10 file_rec<cr>
"nnoremap <silent> <Leader>m :Unite -buffer-name=recent -winheight=10 file_mru<cr>
"nnoremap <Leader>b :Unite -buffer-name=buffers -winheight=10 buffer<cr>
"
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#custom#source('file_rec/async','sorters','sorter_rank')
"
"
"call unite#custom#source('file,file/new,buffer,file_rec','matchers', 'matcher_fuzzy')
"call unite#custom#source('file,file/new,buffer,file_rec','matchers', 'matcher_fuzzy')
"call unite#custom#profile('default', 'context', { 'prompt_direction': 'bellow' })
"let g:unite_enable_split_vertically = 1
"

set grepprg=ack-grep\ -a\ --nocolor           

""""""""""""""""""
"  quich search  "
""""""""""""""""""
"let g:ackprg = 'ag --nogroup --nocolor  --nogroup --column'
"let g:ackprg = 'ag --nogroup --column -S'
let g:ackprg = 'ag --nogroup --nocolor --column -S'

let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts =
            \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
            \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
let g:unite_source_grep_recursive_opt = ''

""""""""""""""""""""""""""""""
"startify 
""""""""""""""""""""""""""""""
"let g:startify_list_order = [
    "\['My sessions:'],
    "\'sessions', 
    "\['Bookmarks(vimrc settings):'],
    "\'bookmarks',
    "\['rectently files:'],
    "\'files', 
    "\['recently dirs:'],
    "\'dir',]
"let g:startify_bookmarks = [ '~/.vim/vimrc' , '~/www/oa/index.php', '~/www/doc/index.md', '~/workspace/cron/deamon.php' ]
" When opening a file or bookmark, change to its directory.
let g:startify_change_to_vcs_root = 1
" A list of Vim regular expressions that filters recently used files.
let g:startify_skiplist = ['\.svn-base', ]

""""""""""""""""""""""""""""""
" ultisnips
""""""""""""""""""""""""""""""
" Trigger configuration. Do not use <tab> if you use


let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

autocmd Filetype python :UltiSnipsAddFiletypes python
"autocmd Filetype c :UltiSnipsAddFiletypes c
"autocmd Filetype cpp :UltiSnipsAddFiletypes cpp
autocmd Filetype php :UltiSnipsAddFiletypes php
autocmd Filetype javascript :UltiSnipsAddFiletypes javascript
autocmd Filetype html :UltiSnipsAddFiletypes html
autocmd Filetype sh :UltiSnipsAddFiletypes sh
" " If you want :UltiSnipsEdit to split your window.
 let g:UltiSnipsEditSplit="vertical"

 """""""""""""""""
 "  git control  "
 """""""""""""""""
"Auto-clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd QuickFixCmdPost *log* cwindow

""""""""""""""""""
"  syntax check  "
"  """"""""""""""""""
let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_javascript_jshint_exec='/usr/local/bin/jshint'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

highlight SyntasticError guibg=#2f0000


"map <Leader>se :SyntasticCheck<cr> 
map <Leader>se :Errors<cr> 

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"
""""""""""""""""""""""
"  ycm autocomplete  "
""""""""""""""""""""""
"let g:ycm_semantic_triggers =  { 'c' : ['->', '.'] }
"let g:ycm_auto_trigger = 0

"""""""""""""
"  minibuf  "
"""""""""""""
let g:miniBufExplVSplit=25
let g:miniBufExplBRSplit=0

"""""""""""""""""""""""""""
"  auto update tags file  "
"""""""""""""""""""""""""""


set ttimeoutlen=1
"for UseAlt in range (65 , 90 ) + range ( 97 , 122) + range(47,47)
"for UseAlt in  range(47,47)
exe "set <M-" .nr2char(47).">=\<Esc>" .nr2char (47)
"endfor
"
map <M-/> :call NERDComment('i','invert') <cr>
"nmap <M-c> <Plug>NERDCommenterComment
"xmap <M-c> <Plug>NERDCommenterComment
"nmap <M-u> <Plug>NERDCommenterComment
"xmap <M-u> <Plug>NERDCommenterUncomment


let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1


" YCM doesn't play nice with emmet, so disable it for html as a workaround
let g:ycm_filetype_blacklist = {
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'text' : 1,
      \ 'unite' : 1,
      \ 'html' : 1,
      \}


"vim-javascript
let javascript_enable_domhtmlcss = 1
let b:javascript_fold = 1
let javascript_ignore_javaScriptdoc = 1

let g:javascript_conceal_function   = "ƒ"
let g:javascript_conceal_null       = "ø"
let g:javascript_conceal_this       = "@"
let g:javascript_conceal_return     = "⇚"
let g:javascript_conceal_undefined  = "¿"
let g:javascript_conceal_NaN        = "ℕ"
let g:javascript_conceal_prototype  = "¶"
let g:javascript_conceal_static     = "•"
let g:javascript_conceal_super      = "Ω"


"vim-jsx
let g:jsx_ext_required = 0

" Disable default mappings

" Bi-directional find motion
" " Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" " `s{char}{label}`
 "nmap s <Plug>(easymotion-s)
" " or
  "`s{char}{char}{label}`
" " Need one more keystroke, but on average, it may be more comfortable.
 nmap s <Plug>(easymotion-sn)
 "nmap s <Plug>(easymotion-w)
 "nmap sw <Plug>(easymotion-w)
"
" " Turn on case insensitive feature
 "let g:EasyMotion_smartcase = 1
"
" " JK motions: Line motions

let g:EasyMotion_prompt = 'for {n} character(s):'
let g:EasyMotion_do_mapping = 0 
"nmap <Leader>s <Plug>(easymotion-j)
"nmap <Leader>d <Plug>(easymotion-k)
let g:EasyMotion_smartcase = 1

"autocmd FileType js nested :TagbarOpen


"showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let showmarks_enable = 1 
let g:showmarks_textlower ="\t>"
let g:showmarks_textupper ="\t&"
let showmarks_hlline_lower = 1 
let showmarks_hlline_upper= 1 
let showmarks_hlline_other = 1 

" For marks a-z
highlight ShowMarksHLl gui=bold guibg=LightBlue guifg=Blue
" For marks A-Z
highlight ShowMarksHLu gui=bold guibg=LightRed guifg=DarkRed
" For all other marks
highlight ShowMarksHLo gui=bold guibg=LightYellow guifg=DarkYellow
" For multiple marks on the same line.
highlight ShowMarksHLm gui=bold guibg=LightGreen guifg=DarkGreen


"    :MBEClose 
nmap <leader>mb :MBEToggle<cr>
nmap <leader>nt :NERDTreeToggle <cr>
nmap <leader>tt :TagbarToggle<cr>
nmap <leader>ut :UndotreeToggle<cr>

"calendar
nmap <leader>ct :Calendar<cr>

"DelimitMateSwitch   符号自动补全
nmap <leader>dm :DelimitMateSwitch<cr>

nmap <leader>st :ShowMarksToggle<cr>


"source ~/.vim/plugin/cscope_maps.vim
"source ~/.vim/bundle/vim-textobj-javascript/plugin/textobj/javascript.vim


"寄存器复制粘帖  用于复制后操作(主要删除)能继续复制
map ty "ay
map tp "ap




"python 自动缩进
Plugin 'vim-scripts/indentpython.vim'
Plugin 'nvie/vim-flake8'

"python 配置
au BufNewFile,BufRead *.py,*.recipe
\ set softtabstop=4 | set shiftwidth=4 | set textwidth=79 | set expandtab | set autoindent | set fileformat=unix | set tabstop=4

"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.recipe match  BadWhitespace /\s\+$/
set encoding=utf-8

let python_highlight_all=1
"系统剪切板
set clipboard=unnamed

"json
let g:vim_json_warnings=1
"let g:vim_json_syntax_conceal = 2
"

"jsDoc 
nmap <silent> <leader>fn  <Plug>(jsdoc)
nmap <silent>  <leader>fn ?function<cr>:noh<cr><Plug>(jsdoc)



"vim node 
autocmd User Node
            \ if &filetype == "javascript" |
            \   nmap <buffer> <C-w>f <Plug>NodeVSplitGotoFile |
            \   nmap <buffer> <C-w><C-f> <Plug>NodeVSplitGotoFile |
            \ endif


"emmet
let g:user_emmet_leader_key='<C-H>'


